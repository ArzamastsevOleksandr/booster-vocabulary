<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="boosterVocabularyHost" elementType="Argument">
            <stringProp name="Argument.name">boosterVocabularyHost</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="boosterVocabularyPort" elementType="Argument">
            <stringProp name="Argument.name">boosterVocabularyPort</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="boosterVocabularyPath" elementType="Argument">
            <stringProp name="Argument.name">boosterVocabularyPath</stringProp>
            <stringProp name="Argument.value">/api</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="boosterVocabularyProtocol" elementType="Argument">
            <stringProp name="Argument.name">boosterVocabularyProtocol</stringProp>
            <stringProp name="Argument.value">http</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="#####################SEPARATOR#####################" elementType="Argument">
            <stringProp name="Argument.name">#####################SEPARATOR#####################</stringProp>
            <stringProp name="Argument.value">#####################SEPARATOR#####################</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="languagePath" elementType="Argument">
            <stringProp name="Argument.name">languagePath</stringProp>
            <stringProp name="Argument.value">/language</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="languageVocabularySetPath" elementType="Argument">
            <stringProp name="Argument.name">languageVocabularySetPath</stringProp>
            <stringProp name="Argument.value">/language-vocabulary-set</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="vocabularyPath" elementType="Argument">
            <stringProp name="Argument.name">vocabularyPath</stringProp>
            <stringProp name="Argument.value">/vocabulary</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="#####################SEPARATOR2#####################" elementType="Argument">
            <stringProp name="Argument.name">#####################SEPARATOR2#####################</stringProp>
            <stringProp name="Argument.value">#####################SEPARATOR2#####################</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DEFAULT_VOCABULARY_NAME" elementType="Argument">
            <stringProp name="Argument.name">DEFAULT_VOCABULARY_NAME</stringProp>
            <stringProp name="Argument.value">Default</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="NEW_VOCABULARY_NAME" elementType="Argument">
            <stringProp name="Argument.name">NEW_VOCABULARY_NAME</stringProp>
            <stringProp name="Argument.value">NewVocabularyName</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Booster-Vocabulary Integration Test" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="VAR USERNAME" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">9999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">USERNAME</stringProp>
          <stringProp name="CounterConfig.format">USERNAME0000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="VAR EMAIL" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">9999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">EMAIL</stringProp>
          <stringProp name="CounterConfig.format">EMAIL0000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="VAR PASS" enabled="true">
          <stringProp name="CounterConfig.start">1</stringProp>
          <stringProp name="CounterConfig.end">9999</stringProp>
          <stringProp name="CounterConfig.incr">1</stringProp>
          <stringProp name="CounterConfig.name">PASS</stringProp>
          <stringProp name="CounterConfig.format">PASS0000</stringProp>
          <boolProp name="CounterConfig.per_user">false</boolProp>
        </CounterConfig>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sign Up" enabled="true">
          <stringProp name="TestPlan.comments">Sign up a new user</stringProp>
        </GenericController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="### Sign Up ###" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Signup" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;${USERNAME}&quot;,&#xd;
    &quot;email&quot;: &quot;${EMAIL}&quot;,&#xd;
    &quot;password&quot;: &quot;${PASS}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/signup</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

final EXPECTED_STATUS = &quot;200&quot;
final EXPECTED_RESPONSE_MAP_SIZE = 1
final EXPECTED_MESSAGE = &quot;User registered successfully!&quot;
final EXPECTED_LANGUAGE_NAMES = Arrays.asList(
        &quot;English&quot;,
        &quot;German&quot;
)

def failureMessage = &quot;&quot;
org.apache.groovy.json.internal.LazyMap response = null

JsonSlurper JSON = new JsonSlurper()

try {
    response = JSON.parseText(prev.getResponseDataAsString())
} catch (Exception ignored) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}

if (!EXPECTED_STATUS.equals(prev.getResponseCode())){
    failureMessage += &quot;Expected &quot; + EXPECTED_STATUS + &quot; but got [&quot; + prev.getResponseCode() + &quot;]\n\n&quot;
}

def actualListSize = response.size()
if (actualListSize != EXPECTED_RESPONSE_MAP_SIZE) {
    failureMessage += String.format(&quot;Expected list of size %s, got %s\n\n&quot;, EXPECTED_RESPONSE_MAP_SIZE, actualListSize)
}

if (!response.get(&quot;message&quot;).equals(EXPECTED_MESSAGE)) {
    failureMessage += String.format(&quot;Expected response to contain %s&quot;, EXPECTED_MESSAGE)
}

if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;JSON RESPONSE: &quot; + response + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;

    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1496034992">&quot;message&quot;: &quot;User registered successfully!&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Sign In" enabled="true">
          <stringProp name="TestPlan.comments">Sign In with username and password</stringProp>
        </GenericController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="### Sign In ###" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Sign In" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;username&quot;: &quot;${USERNAME}&quot;,&#xd;
    &quot;password&quot;: &quot;${PASS}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/signin</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: JWT" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">JWT</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.jwt</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Update test when auth finished" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Language" enabled="true">
          <stringProp name="TestPlan.comments">Get a language dictionary</stringProp>
        </GenericController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="### Language ###" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Language List" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${languagePath}/list</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

final EXPECTED_STATUS = &quot;200&quot;
final EXPECTED_LANGUAGE_LIST_SIZE = 2
final EXPECTED_LANGUAGE_NAMES = Arrays.asList(
        &quot;English&quot;,
        &quot;German&quot;
)

def failureMessage = &quot;&quot;
List&lt;String&gt; responseList = null

JsonSlurper JSON = new JsonSlurper()

try {
    responseList = JSON.parseText(prev.getResponseDataAsString())
} catch (Exception ignored) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}

if (!EXPECTED_STATUS.equals(prev.getResponseCode())){
    failureMessage += &quot;Expected &quot; + EXPECTED_STATUS + &quot; but got [&quot; + prev.getResponseCode() + &quot;]\n\n&quot;
}

def actualListSize = responseList.size()
if (actualListSize != EXPECTED_LANGUAGE_LIST_SIZE) {
    failureMessage += String.format(&quot;Expected list of size %s, got %s\n\n&quot;, EXPECTED_LANGUAGE_LIST_SIZE, actualListSize)
}

// todo: optimize (create a map and reduce complexity to O(1)
def listOfMaps = (responseList as List&lt;org.apache.groovy.json.internal.LazyMap&gt;)
EXPECTED_LANGUAGE_NAMES.each {languageName -&gt; {
    def anyMatch = listOfMaps.any {it.get(&quot;name&quot;) == languageName}
    if (!anyMatch) {
        failureMessage += &quot;Expected to find [&quot; + languageName + &quot;] in the response collection\n\n&quot;
    }
}}
if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;JSON RESPONSE: &quot; + responseList + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;

    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: Language Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">LANG_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[0].id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: Language Name" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">LANG_NAME</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.[0].name</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Language By Id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${languagePath}/${LANG_ID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion: name" enabled="true">
              <stringProp name="JSON_PATH">$.name</stringProp>
              <stringProp name="EXPECTED_VALUE">${LANG_NAME}</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LanguageVocabularySet" enabled="true">
          <stringProp name="TestPlan.comments">Create a new LanguageVocabularySet</stringProp>
        </GenericController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="### LanguageVocabularySet ###" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Create LanguageVocabularySet" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;languageId&quot;: &quot;${LANG_ID}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${languageVocabularySetPath}/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.languageVocabularySetId</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: LANG_VOCAB_SET_ID_ONE" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">LANG_VOCAB_SET_ID_ONE</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.languageVocabularySetId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET LanguageVocabularySet By Id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${languageVocabularySetPath}/${LANG_VOCAB_SET_ID_ONE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

final EXPECTED_STATUS = &quot;200&quot;
final EXPECTED_LANGUAGE_VOCABULARY_ID = Integer.valueOf((String) vars.get(&quot;LANG_VOCAB_SET_ID_ONE&quot;))
final EXPECTED_LANGUAGE_ID = Integer.valueOf((String) vars.get(&quot;LANG_ID&quot;))
final EXPECTED_LANGUAGE_NAME = vars.get(&quot;LANG_NAME&quot;)
final EXPECTED_VOCABULARY_DTO_LIST_SIZE = 1
final DEFAULT_VOCABULARY_NAME = vars.get(&quot;DEFAULT_VOCABULARY_NAME&quot;)

def failureMessage = &quot;&quot;
org.apache.groovy.json.internal.LazyMap responseMap = null

JsonSlurper JSON = new JsonSlurper()

try {
    responseMap = JSON.parseText(prev.getResponseDataAsString())
} catch (Exception ignored) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}

if (!EXPECTED_STATUS.equals(prev.getResponseCode())) {
    failureMessage += &quot;Expected &quot; + EXPECTED_STATUS + &quot; but got [&quot; + prev.getResponseCode() + &quot;]\n\n&quot;
}

def actualId = responseMap.get(&quot;id&quot;)
if (EXPECTED_LANGUAGE_VOCABULARY_ID != actualId) {
    failureMessage += String.format(&quot;Expected id %s, got %s\n\n&quot;, EXPECTED_LANGUAGE_VOCABULARY_ID, actualId)
}
if (responseMap.get(&quot;createdOn&quot;) == null) {
    failureMessage += &quot;createdOn is null\n\n&quot;
}

org.apache.groovy.json.internal.LazyMap languageDto = responseMap.get(&quot;languageDto&quot;)
def actualLanguageId = languageDto.get(&quot;id&quot;)
if (actualLanguageId != EXPECTED_LANGUAGE_ID) {
    failureMessage += String.format(&quot;Expected languageDto.id %s, got %s\n\n&quot;, EXPECTED_LANGUAGE_ID, actualLanguageId)
}
def actualLanguageName = languageDto.get(&quot;name&quot;)
if (actualLanguageName != EXPECTED_LANGUAGE_NAME) {
    failureMessage += String.format(&quot;Expected languageDto.name %s, got %s\n\n&quot;, EXPECTED_LANGUAGE_NAME, actualLanguageName)
}

List&lt;org.apache.groovy.json.internal.LazyMap&gt; actualVocabularyDtoList = responseMap.get(&quot;vocabularyDtoList&quot;)
def actualVocabularyDtoListSize = actualVocabularyDtoList.size()
if (actualVocabularyDtoListSize != EXPECTED_VOCABULARY_DTO_LIST_SIZE) {
    failureMessage += String.format(&quot;Expected vocabularyDtoList.size() %s, got %s\n\n&quot;, EXPECTED_VOCABULARY_DTO_LIST_SIZE, actualVocabularyDtoListSize)
}
org.apache.groovy.json.internal.LazyMap firstVocabularyDto = actualVocabularyDtoList.get(0)
def firstVocabularyDtoId = firstVocabularyDto.get(&quot;id&quot;)
if (firstVocabularyDtoId == null) {
    failureMessage += &quot;firstVocabularyDto.id is null &quot; + firstVocabularyDto + &quot;\n\n&quot;
} else {
    vars.put(&quot;DEFAULT_VOCABULARY_ID_ONE&quot;, &quot;&quot; + firstVocabularyDtoId)
}
def firstVocabularyDtoName = firstVocabularyDto.get(&quot;name&quot;)
if (!DEFAULT_VOCABULARY_NAME.equals(firstVocabularyDtoName)) {
    failureMessage += String.format(&quot;Expected firstVocabularyDto.name to be equal to %s, got %s\n\n&quot;, DEFAULT_VOCABULARY_NAME, firstVocabularyDtoName)
}

if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;JSON RESPONSE: &quot; + responseMap + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;

    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Default Vocabulary By Id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${vocabularyPath}/${DEFAULT_VOCABULARY_ID_ONE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

final EXPECTED_STATUS = &quot;200&quot;
final EXPECTED_DEFAULT_VOCABULARY_ID = Integer.valueOf((String) vars.get(&quot;DEFAULT_VOCABULARY_ID_ONE&quot;))
final EXPECTED_ENTRY_COUNT = 0

def failureMessage = &quot;&quot;
org.apache.groovy.json.internal.LazyMap responseMap = null

JsonSlurper JSON = new JsonSlurper()

try {
    responseMap = JSON.parseText(prev.getResponseDataAsString())
} catch (Exception ignored) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}

if (!EXPECTED_STATUS.equals(prev.getResponseCode())) {
    failureMessage += &quot;Expected &quot; + EXPECTED_STATUS + &quot; but got [&quot; + prev.getResponseCode() + &quot;]\n\n&quot;
}

def actualId = responseMap.get(&quot;id&quot;)
if (EXPECTED_DEFAULT_VOCABULARY_ID != actualId) {
    failureMessage += String.format(&quot;Expected id %s, got %s\n\n&quot;, EXPECTED_DEFAULT_VOCABULARY_ID, actualId)
}

if (responseMap.get(&quot;createdOn&quot;) == null) {
    failureMessage += &quot;createdOn is null\n\n&quot;
}

def actualEntryCount = responseMap.get(&quot;entryCount&quot;)
if (actualEntryCount != EXPECTED_ENTRY_COUNT) {
    failureMessage += String.format(&quot;Expected entryCount %s, got %s\n\n&quot;, EXPECTED_ENTRY_COUNT, actualEntryCount)
}

List&lt;org.apache.groovy.json.internal.LazyMap&gt; actualVocabularyEntries = responseMap.get(&quot;vocabularyEntries&quot;)
if (!actualVocabularyEntries.isEmpty()) {
    failureMessage += String.format(&quot;Expected vocabularyEntries to have size %s, got %s\n\n&quot;, 0, actualVocabularyEntries.size())
}

if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;JSON RESPONSE: &quot; + responseMap + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;

    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vocabulary" enabled="true">
          <stringProp name="TestPlan.comments">Create a new Vocabulary</stringProp>
        </GenericController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="### Vocabulary ###" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Create Vocabulary" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;vocabularyName&quot;: &quot;${NEW_VOCABULARY_NAME}&quot;,&#xd;
	&quot;languageId&quot;: &quot;${LANG_ID}&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${vocabularyPath}/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.vocabularyId</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor: NEW_VOCAB_ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">NEW_VOCAB_ID</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.vocabularyId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET New Vocabulary By Id" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${vocabularyPath}/${NEW_VOCAB_ID}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

final EXPECTED_STATUS = &quot;200&quot;
final EXPECTED_VOCABULARY_ID = Integer.valueOf((String) vars.get(&quot;NEW_VOCAB_ID&quot;))
final EXPECTED_ENTRY_COUNT = 0

def failureMessage = &quot;&quot;
org.apache.groovy.json.internal.LazyMap responseMap = null

JsonSlurper JSON = new JsonSlurper()

try {
    responseMap = JSON.parseText(prev.getResponseDataAsString())
} catch (Exception ignored) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}

if (!EXPECTED_STATUS.equals(prev.getResponseCode())) {
    failureMessage += &quot;Expected &quot; + EXPECTED_STATUS + &quot; but got [&quot; + prev.getResponseCode() + &quot;]\n\n&quot;
}

def actualId = responseMap.get(&quot;id&quot;)
if (EXPECTED_VOCABULARY_ID != actualId) {
    failureMessage += String.format(&quot;Expected id %s, got %s\n\n&quot;, EXPECTED_VOCABULARY_ID, actualId)
}

if (responseMap.get(&quot;createdOn&quot;) == null) {
    failureMessage += &quot;createdOn is null\n\n&quot;
}

def actualEntryCount = responseMap.get(&quot;entryCount&quot;)
if (actualEntryCount != EXPECTED_ENTRY_COUNT) {
    failureMessage += String.format(&quot;Expected entryCount %s, got %s\n\n&quot;, EXPECTED_ENTRY_COUNT, actualEntryCount)
}

List&lt;org.apache.groovy.json.internal.LazyMap&gt; actualVocabularyEntries = responseMap.get(&quot;vocabularyEntries&quot;)
if (!actualVocabularyEntries.isEmpty()) {
    failureMessage += String.format(&quot;Expected vocabularyEntries to have size %s, got %s\n\n&quot;, 0, actualVocabularyEntries.size())
}

if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;JSON RESPONSE: &quot; + responseMap + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;

    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Default Vocabulary By Id" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${boosterVocabularyHost}</stringProp>
            <stringProp name="HTTPSampler.port">${boosterVocabularyPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${boosterVocabularyProtocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${boosterVocabularyPath}/${vocabularyPath}/${DEFAULT_VOCABULARY_ID_ONE}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${JWT}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.JsonSlurper

final EXPECTED_STATUS = &quot;200&quot;
final EXPECTED_DEFAULT_VOCABULARY_ID = Integer.valueOf((String) vars.get(&quot;DEFAULT_VOCABULARY_ID_ONE&quot;))
final EXPECTED_ENTRY_COUNT = 0

def failureMessage = &quot;&quot;
org.apache.groovy.json.internal.LazyMap responseMap = null

JsonSlurper JSON = new JsonSlurper()

try {
    responseMap = JSON.parseText(prev.getResponseDataAsString())
} catch (Exception ignored) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}

if (!EXPECTED_STATUS.equals(prev.getResponseCode())) {
    failureMessage += &quot;Expected &quot; + EXPECTED_STATUS + &quot; but got [&quot; + prev.getResponseCode() + &quot;]\n\n&quot;
}

def actualId = responseMap.get(&quot;id&quot;)
if (EXPECTED_DEFAULT_VOCABULARY_ID != actualId) {
    failureMessage += String.format(&quot;Expected id %s, got %s\n\n&quot;, EXPECTED_DEFAULT_VOCABULARY_ID, actualId)
}

if (responseMap.get(&quot;createdOn&quot;) == null) {
    failureMessage += &quot;createdOn is null\n\n&quot;
}

def actualEntryCount = responseMap.get(&quot;entryCount&quot;)
if (actualEntryCount != EXPECTED_ENTRY_COUNT) {
    failureMessage += String.format(&quot;Expected entryCount %s, got %s\n\n&quot;, EXPECTED_ENTRY_COUNT, actualEntryCount)
}

List&lt;org.apache.groovy.json.internal.LazyMap&gt; actualVocabularyEntries = responseMap.get(&quot;vocabularyEntries&quot;)
if (!actualVocabularyEntries.isEmpty()) {
    failureMessage += String.format(&quot;Expected vocabularyEntries to have size %s, got %s\n\n&quot;, 0, actualVocabularyEntries.size())
}

if (failureMessage?.trim()) {
    failureMessage += &quot;URL: &quot; + SampleResult.getURL() + &quot;\n\n&quot;
    failureMessage += &quot;JSON RESPONSE: &quot; + responseMap + &quot;\n\n&quot;
    failureMessage += &quot;REQUEST HEADERS: &quot; + SampleResult.getRequestHeaders() + &quot;\n\n&quot;

    AssertionResult.setFailureMessage(failureMessage)
    AssertionResult.setFailure(true)
}
</stringProp>
            </JSR223Assertion>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor: JsonFormat" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">prev.setResponseData(groovy.json.JsonOutput.prettyPrint(prev.getResponseDataAsString()))</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
